#!/usr/bin/env python3
import rospy
from threading import Thread
from time import sleep, time
from flir_smart_camera_driver import RestInterfaceHandle, RTSPCLIENT


class Driver(RestInterfaceHandle, RTSPCLIENT):
    """ ROS Driver for FLIR Smart Cameras """        
    
    def __init__(self):
        RestInterfaceHandle.__init__(self)
        RTSPCLIENT.__init__(self)
        self.threads = list()

    def createThread(self, func, *args,  isDaemon=True):
        """Create a thread with given arguments

        Args: 
            func: Callable object for thread function
            args: is the argument tuple for the target invocation
            isDaemon: If its a daemon thread 
        Returns: None
        Raises: None
        """
        
        thread = Thread(target=func, args=args)
        thread.daemon = True if isDaemon else False
        thread.start()
        self.threads.append(thread)
        sleep(1)

    def cleanup(self):
        self.rtspCleanup()
        self.InterfaceCleanup()

    def run(self):
        """ main function to run the driver """

        # self.createThread(self.isAlive)
        # duration = time() + 5
        # while time() < duration and not rospy.is_shutdown():
        #     if self.is_alive:
        #         break
        # if not self.is_alive:
        #     rospy.logerr("Camera connection failed!")
        #     rospy.logerr("Camera address is: {}".format(self.device_address))
        #     return
        self.initRESTInterfaceHandle()
        self.initRTSPHandle()
        self.createThread(self.checkAlarmStatus)
        [self.createThread(self.imageStream, stream) for stream in self.streams]
        rospy.spin()

if __name__ == "__main__":
    rospy.init_node('flir_smart_device_driver_node', anonymous=False)
    rospy.loginfo('camera driver node initialized')
    driver = Driver()
    rospy.on_shutdown(driver.cleanup)
    driver.run()
